{"version":3,"sources":["components/inputs/index.js","components/signup/index.js","App.js","serviceWorker.js","index.js"],"names":["Label","react_default","a","createElement","htmlFor","this","props","for","id","className","class","children","Component","Text","type","name","defaultValue","value","placeholder","onChange","onchange","onBlur","onblur","Email","Password","onFocus","onfocus","Button","onClick","onclick","SignUp","testFunction","event","target","nodeName","console","log","textContent","Fragment","inputs_Label","inputs_Text","inputs_Email","inputs_Password","inputs_Button","App","signup","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.536e554d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Label extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<label htmlFor={this.props.for}\n\t\t\t\tid={this.props.id}\n\t\t\t\tclassName={this.props.class}\n\t\t\t// you can add the attributes or events you need here...\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</label>\n\t\t);\n\t}\n}\n\nclass Text extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<input type=\"text\"\n\t\t\t\tid={this.props.id}\n\t\t\t\tname={this.props.name}\n\t\t\t\tdefaultValue={this.props.value}\n\t\t\t\tclassName={this.props.class}\n\t\t\t\tplaceholder={this.props.placeholder}\n\t\t\t\tonChange={this.props.onchange}\n\t\t\t\tonBlur={this.props.onblur}\n\t\t\t// you can add the attributes or events you need here...\n\t\t\t/>\n\t\t);\n\t}\n}\n\nclass Email extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<input type=\"email\"\n\t\t\t\tid={this.props.id}\n\t\t\t\tname={this.props.name}\n\t\t\t\tdefaultValue={this.props.value}\n\t\t\t\tclassName={this.props.class}\n\t\t\t\tplaceholder={this.props.placeholder}\n\t\t\t\tonChange={this.props.onchange}\n\t\t\t\tonBlur={this.props.onblur}\n\t\t\t// you can add the attributes or events you need here...\n\t\t\t/>\n\t\t);\n\t}\n}\n\nclass Password extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<input type=\"password\"\n\t\t\t\tid={this.props.id}\n\t\t\t\tname={this.props.name}\n\t\t\t\tdefaultValue={this.props.value}\n\t\t\t\tclassName={this.props.class}\n\t\t\t\tplaceholder={this.props.placeholder}\n\t\t\t\tonChange={this.props.onchange}\n\t\t\t\tonFocus={this.props.onfocus}\n\t\t\t\tonBlur={this.props.onblur}\n\t\t\t// you can add the attributes or events you need here...\n\t\t\t/>\n\t\t);\n\t}\n}\n\nclass Button extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<button type=\"button\"\n\t\t\t\tid={this.props.id}\n\t\t\t\tname={this.props.name}\n\t\t\t\tdefaultValue={this.props.value}\n\t\t\t\tclassName={this.props.class}\n\t\t\t\tonClick={this.props.onclick}\n\t\t\t// you can add the attributes or events you need here...\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</button>\n\t\t);\n\t}\n}\n\nexport { Label, Text, Email, Password, Button };","import React, { Component } from 'react';\nimport { Label, Text, Email, Password, Button } from \"../inputs\";\n\nclass SignUp extends Component {\n\n\ttestFunction = (event) => {\n\t\tif (event.target.nodeName === \"INPUT\") {\n\t\t\tconsole.log(event.target.value);\n\t\t}\n\t\tif (event.target.nodeName === \"BUTTON\") {\n\t\t\tconsole.log(event.target.textContent);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<br />\n\t\t\t\t<h2>Sign Up</h2>\n\t\t\t\t<hr />\n\t\t\t\t<form>\n\t\t\t\t\t<Label for=\"username\" class=\"color-dark\">Username:</Label>\n\t\t\t\t\t<Text\n\t\t\t\t\t\tid=\"username\"\n\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\tclass=\"color-blue\"\n\t\t\t\t\t\tplaceholder=\"username...\"\n\t\t\t\t\t\tonblur={this.testFunction} />\n\n\t\t\t\t\t<Label for=\"username\" class=\"color-dark\">Email:</Label>\n\t\t\t\t\t<Email\n\t\t\t\t\t\tid=\"email\"\n\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\tclass=\"color-green\"\n\t\t\t\t\t\tplaceholder=\"email...\"\n\t\t\t\t\t\tonblur={this.testFunction} />\n\n\t\t\t\t\t<Label for=\"username\" class=\"color-dark\">Password:</Label>\n\t\t\t\t\t<Password\n\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\tclass=\"color-red\"\n\t\t\t\t\t\tplaceholder=\"password...\"\n\t\t\t\t\t\tonblur={this.testFunction} />\n\t\t\t\t\t<hr />\n\t\t\t\t\t<Button onclick={this.testFunction}>\n\t\t\t\t\t\tSign Up\n\t\t\t</Button>\n\t\t\t\t</form>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default SignUp;\n","import React, { Component } from 'react';\nimport SignUp from './components/signup';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<SignUp />\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}